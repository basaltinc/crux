@import "../../../scss/core/core";

$crux-grid-breakpoint-options: (
  small: (
    mq: $crux-breakpoint-media-query-small,
    gutter: $crux-spacing-l,
  ),
  medium: (
    mq: $crux-breakpoint-media-query-medium,
    gutter: $crux-spacing-l,
  ),
  large: (
    mq: $crux-breakpoint-media-query-large,
    gutter: $crux-spacing-xxl,
  ),
);

/// Get width of grid item
/// `calc()` is returned b/c you can use `px` gutters and `%` width.
/// @param $row-items - How many items in the row
/// @param $gutter [0] - width of space between each item
/// @returns {number} - a `calc()` value to use in `width`
/// @example scss
///   .class {
///     width: grid-width(4, 10px); // becomes `width: calc(25% - 7.5px);`
///   }
@function crux-grid-item-width($row-items, $gutter: 0px) {
  // example: if 4 row items, with 10px gutter
  // if no gutters, how big would each item be?
  $gutterlessSize: 100% / $row-items; // 25%
  // how many total gutters are in each row?
  $guttersPerRow: $row-items - 1; // 3
  // what is the total width all gutters in each row take up?
  $gutterSpacePerRow: $gutter * $guttersPerRow; // 30px
  // how much width does each item need to be reduced by to create space for gutters?
  $itemSizeReduction: $gutterSpacePerRow / $row-items; // 7.5px
  @return calc(#{$gutterlessSize} - #{$itemSizeReduction}); // calc(25% - 7.5px)
}

/// Symmetric Grid
/// Include in a parent element to layout all children with same widths
/// @param $row-items [3] - How many items per row
/// @param $gutter - Space between Items
@mixin crux-symmetric-grid($gutter, $row-items: 3) {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  justify-content: flex-start;
  > .crux-grid__item {
    &:nth-child(n) {
      margin-right: $gutter;
      @if $row-items > 1 {
        width: crux-grid-item-width($row-items, $gutter);
      } @else {
        width: 100%;
      }
    }

    // last item in each row
    &:nth-child(#{$row-items}n + #{$row-items}) {
      margin-right: 0;
    }

    &:nth-child(n + #{$row-items + 1}) {
      margin-top: $gutter;
    }

    &:nth-child(-n + #{$row-items}) {
      margin-top: 0;
    }
  }
}

.crux-grid {
  @media #{$crux-breakpoint-media-query-medium} {
    display: flex;
    flex-wrap: wrap;
  }
  > .crux-grid__item {
    margin-top: $crux-spacing-l;
    display: flex;
    flex-direction: column;
    &:first-child {
      //margin-top: 0;
    }
    > * {
      flex-grow: 1;
    }
  }
}

// Loop through gutter options (s, m, l) as defined above
@each $breakpoint-name, $breakpoint-map in $crux-grid-breakpoint-options {
  $breakpoint-var: map-get($breakpoint-map, "mq");
  $gutter-var: map-get($breakpoint-map, "gutter");
  .crux-grid {
    // Loop through breakpoints (medium, large) as defined above
    @media #{$breakpoint-var} {
      > .crux-grid__item {
        margin-top: $gutter-var;

        //&:first-child {
        //  margin-top: 0;
        //}
      }
      &[data-grid-type-#{$breakpoint-name}="100"] {
        > .crux-grid__item {
          &:nth-child(n) {
            width: 100%;
            margin-top: $gutter-var;
          }

          &:first-child {
            margin-top: 0;
          }
        }
      }
      &[data-grid-type-#{$breakpoint-name}="50:50"] {
        @include crux-symmetric-grid($row-items: 2, $gutter: $gutter-var);
      }
      &[data-grid-type-#{$breakpoint-name}="33:33:33"] {
        @include crux-symmetric-grid($row-items: 3, $gutter: $gutter-var);
      }
      &[data-grid-type-#{$breakpoint-name}="25:25:25:25"] {
        @include crux-symmetric-grid($row-items: 4, $gutter: $gutter-var);
      }
      &[data-grid-type-#{$breakpoint-name}="25:75"],
      &[data-grid-type-#{$breakpoint-name}="75:25"],
      &[data-grid-type-#{$breakpoint-name}="33:66"],
      &[data-grid-type-#{$breakpoint-name}="66:33"] {
        > .crux-grid__item {
          &:nth-child(n) {
            margin-right: $gutter-var;
          }

          &:nth-child(2n + 2) {
            margin-right: 0;
          }

          &:nth-child(-n + 2) {
            margin-top: 0;
          }

          &:nth-child(n + 3) {
            margin-top: $gutter-var;
          }
        }
      }
      &[data-grid-type-#{$breakpoint-name}="33:66"] {
        > .crux-grid__item {
          &:nth-child(odd) {
            width: calc(33.33% - (#{$gutter-var} / 2));
          }

          &:nth-child(even) {
            width: calc(66.66% - (#{$gutter-var} / 2));
          }
        }
      }
      &[data-grid-type-#{$breakpoint-name}="66:33"] {
        > .crux-grid__item {
          &:nth-child(odd) {
            width: calc(66.66% - (#{$gutter-var} / 2));
          }

          &:nth-child(even) {
            width: calc(33.33% - (#{$gutter-var} / 2));
          }
        }
      }
      &[data-grid-type-#{$breakpoint-name}="75:25"] {
        > .crux-grid__item {
          &:nth-child(odd) {
            width: calc(75% - (#{$gutter-var} / 2));
          }

          &:nth-child(even) {
            width: calc(25% - (#{$gutter-var} / 2));
          }
        }
      }
      &[data-grid-type-#{$breakpoint-name}="25:75"] {
        > .crux-grid__item {
          &:nth-child(odd) {
            width: calc(25% - (#{$gutter-var} / 2));
          }

          &:nth-child(even) {
            width: calc(75% - (#{$gutter-var} / 2));
          }
        }
      }
      &[data-grid-type-#{$breakpoint-name}="25:50:25"] {
        > .crux-grid__item {
          $x: ($gutter-var * 2) / 3;
          &:nth-child(n) {
            margin-right: $gutter-var;
            margin-top: $gutter-var;
          }

          &:nth-child(-n + 3) {
            margin-top: 0;
          }

          &:nth-child(3n + 1) {
            width: calc(25% - #{$x});
          }

          &:nth-child(3n + 2) {
            width: calc(50% - #{$x});
          }

          &:nth-child(3n + 3) {
            width: calc(25% - #{$x});
            margin-right: 0;
          }
        }
      }
    }
  }
}
